package flow.subflow.getenrollments;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: (timestamp generation disabled)
 */
public class DetermineUsablePhrase extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public DetermineUsablePhrase() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("getenrollments-InformIncomplete", "IncompleteEnrollment");
		next.setDebugId(29);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "GetEnrollmentsResult", com.avaya.sce.runtime.Expression.IS_COLLECTION).setDebugId(31)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.ResetCollection("GetEnrollmentsResult").setDebugId(30));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			for(com.avaya.sce.runtime.VarCollIterator varCollIterator0=(com.avaya.sce.runtime.VarCollIterator)new com.avaya.sce.runtime.VarCollIterator().setDebugId(32);varCollIterator0.hasNext(mySession, "GetEnrollmentsResult");varCollIterator0.next()){
				com.avaya.sce.runtime.BooleanOperation bo1 = new com.avaya.sce.runtime.BooleanOperation(com.avaya.sce.runtime.BooleanOperation.OR);
				com.avaya.sce.runtime.Expression be1 = new com.avaya.sce.runtime.Expression("expression1", "phraseInfo:phrase", com.avaya.sce.runtime.Expression.IS_EMPTY);
				bo1.addExpression(be1);
				com.avaya.sce.runtime.Expression be2 = new com.avaya.sce.runtime.Expression("expression2", "GetEnrollmentsResult:count", com.avaya.sce.runtime.Expression.INT_GREATER_THAN, "phraseInfo:count", true);
				bo1.addExpression(be2);

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition").setDebugId(33)).evaluate(mySession, bo1)) {
					actions = new java.util.ArrayList(3);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("phraseInfo:count", "GetEnrollmentsResult:count", false).setDebugId(38));
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("phraseInfo:phrase", "GetEnrollmentsResult:text", false).setDebugId(39));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				}
			}


		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("phraseInfo:count", "GetEnrollmentsResult:count", false).setDebugId(41));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("phraseInfo:phrase", "GetEnrollmentsResult:text", false).setDebugId(42));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}



		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "phraseInfo:count", com.avaya.sce.runtime.Expression.INT_GREATER_THEN_EQUAL, "THRESHOLD_ENROLL", true).setDebugId(45)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("getenrollments-InformComplete", "ReadyToVerify").setDebugId(46));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
